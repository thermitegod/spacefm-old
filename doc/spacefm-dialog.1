.TH spacefm-dialog 1 "August 2019"

.SH NAME
.B spacefm-dialog
dialog commands

.SH DESCRIPTION
SpaceFM Dialog creates a custom GTK dialog based on the GUI elements you
specify on the command line, features run-time internal/external commands which
can modify elements, and outputs evaluatable/parsable results.

.SH Usage
    spacefm --dialog|-g {ELEMENT [OPTIONS] [ARGUMENTS...]} ...

.SH Example
    spacefm -g --label "A message" --button ok

.SH OPTIONS
--title        TEXT|@FILE
               Set window title
.P
--window-icon  ICON|@FILE
               Set window icon
.P
--label        [--wrap|--nowrap] LABEL|@FILE
               Add a text label
.P
--button       LABEL[:ICON]|STOCK|@FILE [COMMAND...]
               Add STOCK dialog button, or LABEL button with ICON
.P
--free-button  LABEL[:ICON]|STOCK|@FILE [COMMAND...]
               Add STOCK button, or LABEL button with ICON anywhere
.P
--input        [--select START[:END]] [TEXT|@FILE [COMMAND...]]
               Add a text entry
.P
--input-large  [--select START[:END]] [TEXT|@FILE [COMMAND...]]
               Add a large text entry
.P
--password     [TEXT|@FILE [COMMAND...]]
               Add a password entry
.P
--viewer       [--scroll] FILE|PIPE [SAVEFILE]
               Add a file or pipe viewer
.P
--editor       [FILE [SAVEFILE]]
               Add multi-line text editor
.P
--check        LABEL [VALUE|@FILE [COMMAND...]]
               Add a checkbox option
.P
--radio        LABEL [VALUE|@FILE [COMMAND...]]
               Add a radio option
.P
--icon         ICON|@FILE [COMMAND...]
               Add an icon
.P
--image        FILE|@FILE [COMMAND...]
               Add an image
.P
--progress     [VALUE|pulse|@FILE]
               Add a progress bar
.P
--hsep         ( no arguments )
               Add a horizontal line separator
.P
--vsep         ( no arguments )
               Add a vertical line separator
.P
--timeout      [DELAY|@FILE]
               Automatically close window after DELAY seconds
.P
--drop         {TEXT... --}|@FILE [DEFAULT|+N|@FILE [COMMAND...]]
               Add a drop-down list.  COMMAND run when clicked.
.P
--combo        {TEXT... --}|@FILE [DEFAULT|+N|@FILE [COMMAND...]]
               Add a combo list.  COMMAND run when Enter pressed.
.P
--list         {[^HEAD[:TYPE]] [--colwidth=W] TEXT... --}|@FILE [COMMAND...]]
               Add a list box.  COMMAND run when double-clicked.
.P
--mlist        {[^HEAD[:TYPE]] [--colwidth=W] TEXT... --}|@FILE [COMMAND...]]
               Add a list box with multiple selections
.P
--chooser      [CHOOSER-OPTIONS] [DIR|FILE|@FILE [COMMAND...]]
               Options: [--save] [--dir] [--multi] [--filter F[:F...]]
.P
--prefix       NAME|@FILE
               Set base variable name  (Default: "dialog")
.P
--window-size  "WIDTHxHEIGHT [PAD]"|@FILE
               Set minimum width, height, padding (-1 = don't change)
.P
--hbox         [--compact] [PAD|@FILE]
               Add following widgets to a horizontal box
.P
--vbox         [--compact] [PAD|@FILE]
               Add following widgets to a vertical box
.P
--close-box
               Close the current box of widgets
.P
--keypress     KEYCODE MODIFIER COMMAND...
               Run COMMAND when a key combination is pressed
.P
--click        COMMAND...
               Run COMMAND when an element is clicked or focused
.P
--window-close COMMAND...
               Run COMMAND on window close attempt
.P
--command      FILE|PIPE [COMMAND...]
               Read commands from FILE or PIPE.  COMMAND for init.
.P
The following arguments may be used as shown above:
    STOCK    ok|cancel|close|open|yes|no|apply|delete|edit|help|save|stop
.P
    ICON     An icon name, eg:  gtk-open
.P
    @FILE    A text file from which to read a value.  In some cases this file
             is monitored, so writing a new value to the file will update the
             element.  In other cases, the file specifies an initial value.
.P
    SAVEFILE A viewer's or editor's contents are saved to this file.
.P
    COMMAND  An internal command or executable followed by arguments. Separate
             multiple commands with a -- argument.
             The following substitutions may be used in COMMANDs:
                 %n           Name of the current element
                 %v           Value of the current element
                 %NAME        Value of element named NAME (eg: %input1)
                 %(command)   stdout from a bash command line
                 %%           %
.P
    LABEL    The following escape sequences in LABEL are unescaped:
                 \\n   newline
                 \\t   tab
                 \\"   "
                 \\   \\
             In --label elements only, if the first character in LABEL is a
             tilde (~), pango markup may be used.  For example:
                 --label '~This is plain. <b>This is bold.</b>'
.P
In addition to the OPTIONS listed above, --compact or --expand options may be
added to any element.  Also, a --font option may be used with most element
types to change the element's font and font size.  For example:
    --input --font "Times New Roman 16" "Default Text"

.SH INTERNAL COMMANDS
noop       ( any arguments )
           No operation - does nothing but evaluate arguments
.P
close      [REVERSE]
           Close the dialog
.P
press      BUTTON-NAME
           Press button named BUTTON-NAME
.P
set        NAME VALUE
           Set element NAME to VALUE
.P
select     NAME [VALUE]
           Select item VALUE (or first/all) in element NAME
.P
unselect   NAME [VALUE]
           Unselect item VALUE (or all) in element NAME
.P
focus      [NAME [REVERSE]]
           Focus element NAME, or raise dialog window
.P
hide       NAME [REVERSE]
           Hide element NAME
.P
show       [NAME [REVERSE]]
           Show element NAME if previously hidden
.P
disable    NAME [REVERSE]
           Disable element NAME
.P
enable     NAME [REVERSE]
           Enable element NAME if previously disabled
.P
source     FILE
           Save files and write source output to FILE

.SH EXAMPLE WITH COMMANDS:
 spacefm -g --label "Enter some text and press Enter:"
            --input "" set label2 %v -- echo '# %n = %v'
            --label
            --button ok

.SH EXAMPLE SCRIPT
 #!/bin/bash
 # This script shows a Yes/No dialog
 # Use QUOTED eval to read variables output by SpaceFM Dialog:
 eval "`spacefm -g --label "Are you sure?" --button yes --button no`"
 if [[ "$dialog_pressed" == "button1" ]]; then
     echo "User pressed Yes - take some action"
 else
     echo "User did NOT press Yes - abort"
 fi


.SH SEE ALSO
.BR spacefm-socket (1)
.PP

.SH For full documentation and examples see the SpaceFM User's Manual
.PP
.I http://ignorantguru.github.io/spacefm/spacefm-manual-en.html#dialog
